#!/usr/bin/env python3
import os
import sys
from collections import defaultdict

from intent.utils.argutils import existsfile
from intent2.eval import eval_bilingual_alignments, eval_aln_report, get_lg_tags, eval_pos, PRFEval, \
    eval_pos_report
from intent2.exceptions import ProcessException
from intent2.projection import project_pos, project_ds, clear_bilingual_alignments, clear_pos_tags
from intent2.classification import LRWrapper
from intent2.model import DependencyException
from intent2.serialize.importers import parse_xigt_corpus
from intent2.serialize.exporters import corpus_to_xigt
from intent2.alignment import heuristic_alignment, AlignException
import argparse
from xigt.codecs.xigtxml import load
import logging

from intent2.utils.visualization import visualize_alignment, draw_alignment, alignment_to_png

logging.basicConfig()

ROOT_LOGGER = logging.getLogger()



if __name__ == '__main__':
    p = argparse.ArgumentParser()
    p.add_argument('-i', '--input', help='inputfile', required=True)
    p.add_argument('-o', '--output', help='Output file', required=True)
    p.add_argument('-v', '--verbose', help='Increase verbosity', action='count', default=0)

    p.add_argument('--no-align', action='store_true', help="Don't perform bilingual alignment. Also disables projection.")
    p.add_argument('--no-posproject', action='store_true', help="Disable POS projection.")
    p.add_argument('--no-dsproject', action='store_true', help="Disable DS projection")
    p.add_argument('--no-posclass', action='store_true', help='Disable POS classification.')

    p.add_argument('--pos-class', type=existsfile, help='Path to the gloss-line classifier model.')

    p.add_argument('--ignore-import-errors', action='store_true', default=False, help='Skip instances that cause errors on import. They will not be ingested')
    p.add_argument('--ds-thresh', default=0.0, type=float, help='Threshold')

    p.add_argument('--ds-pngs', default=None, help='Directory to store dependency structure PNGs for debugging')
    p.add_argument('--aln-pngs', default=None, help='Directory to store alignment PNGs for debugging')

    args = p.parse_args()
    # -------------------------------------------
    # Set logging verbosity.
    # -------------------------------------------
    if args.verbose == 1:
        ROOT_LOGGER.setLevel(logging.INFO)
    elif args.verbose >= 2:
        ROOT_LOGGER.setLevel(logging.DEBUG)
    # -------------------------------------------

    ROOT_LOGGER.info('Loading Xigt corpus from "{}"'.format(args.input))
    xc = load(args.input, 'r')

    ROOT_LOGGER.info('Parsing Xigt corpus into INTENT2 data structures.')
    corp = parse_xigt_corpus(xc, ignore_import_errors=args.ignore_import_errors)

    ROOT_LOGGER.info('Beginning INTENT2 enrichment...')

    if args.no_align:
        ROOT_LOGGER.info('Alignment disabled.')
    if args.no_posproject:
        ROOT_LOGGER.info('POS projection disabled.')
    if args.no_dsproject:
        ROOT_LOGGER.info("DS Projection disabled")

    align_count = 0
    pos_project_count = 0
    ds_project_count = 0

    # Counters for alignment eval.
    aln_eval = PRFEval()
    lg_pos_eval = PRFEval()
    t_pos_eval = PRFEval()

    # Initialize the POS classifier.
    pos_classifier = None if not args.pos_class else LRWrapper.load(args.pos_class)


    for inst in corp:

        old_alignments = inst.trans.alignments
        old_lg_tags = get_lg_tags(inst)
        old_trans_tags = [tw.pos for tw in inst.trans] if inst.trans else []
        clear_pos_tags(inst)
        clear_bilingual_alignments(inst)

        try:

            # Classify the gloss line:


            if not args.no_align:
                # Remove old alignments!
                alignments = heuristic_alignment(inst)
                if alignments:
                    if args.aln_pngs:
                        os.makedirs(args.aln_pngs, exist_ok=True)
                        aln_png_path = os.path.join(args.aln_pngs, '{}_aln.png'.format(inst.id))
                        alignment_to_png(inst, aln_png_path)
                    align_count += 1

            # Perform alignment evaluation
            if old_alignments and inst.trans.alignments:
                eval_bilingual_alignments(inst, old_alignments, aln_eval)


            # Only try projection if there
            # are alignments.
            if inst.trans.alignments:

                if not args.no_posproject:
                    project_pos(inst)
                    pos_project_count += 1
                if not args.no_dsproject:
                    new_ds = project_ds(inst)
                    ds_project_count += 1

            # Perform POS tag evaluation
            if old_lg_tags:
                eval_pos(old_lg_tags, get_lg_tags(inst), lg_pos_eval)
            if old_trans_tags:
                eval_pos(old_trans_tags, inst.trans.tags, t_pos_eval)


            # Attempt to save dependency structures
            # into the specified directory.
            if args.ds_pngs:
                os.makedirs(args.ds_pngs, exist_ok=True)
                if inst.trans and inst.trans.dependency_structure:
                    trans_ds_filename = '{}_trans_ds.png'.format(inst.id)
                    trans_ds_path = os.path.join(args.ds_pngs, trans_ds_filename)
                    inst.trans.dependency_structure.save_png(trans_ds_path)
                if inst.lang and inst.lang.dependency_structure:
                    lang_ds_filename = '{}_lang_ds.png'.format(inst.id)
                    lang_ds_path = os.path.join(args.ds_pngs, lang_ds_filename)
                    inst.lang.dependency_structure.save_png(lang_ds_path)




        except AlignException as ae:
            ROOT_LOGGER.warning('Alignment failed for instance "{}": {}'.format(inst.id, ae))
        except ProcessException as pe:
            ROOT_LOGGER.warning('Processing failed for instance "{}": {}'.format(inst.id, pe))
        except DependencyException as de:
            ROOT_LOGGER.warning('Error in projecting dependency for instance "{}": {}'.format(inst.id, de))

    if not corp:
        ROOT_LOGGER.error("No instances found in corpus. Not writing output.")
    else:
        print("Processing complete.")
        print("\t{} instances.".format(len(corp)))
        print("\t{} instances aligned.".format(align_count))
        print("\t{} instances POS projected.".format(pos_project_count))
        print("\t{} instances ds projected.".format(ds_project_count))

        if aln_eval:
            print(eval_aln_report(aln_eval))
        if lg_pos_eval:
            print(eval_pos_report(lg_pos_eval, 'Lang/Gloss'))
        if t_pos_eval:
            print(eval_pos_report(t_pos_eval, 'Translation'))

        print("Preparing to write output.")
        with open(args.output, 'w') as out_f:
            out_f.write(corpus_to_xigt(corp))

