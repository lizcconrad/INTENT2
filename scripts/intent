#!/usr/bin/env python3
import os
import sys

from intent2.exceptions import ProcessException
from intent2.projection import project_pos, project_ds
from intent2.model import DependencyException
from intent2.serialize.importers import parse_xigt_corpus
from intent2.serialize.exporters import corpus_to_xigt
from intent2.alignment import heuristic_alignment, AlignException
import argparse
from xigt.codecs.xigtxml import load
import logging
logging.basicConfig()

import sys

ROOT_LOGGER = logging.getLogger()



if __name__ == '__main__':
    p = argparse.ArgumentParser()
    p.add_argument('-i', '--input', help='inputfile', required=True)
    p.add_argument('-o', '--output', help='Output file', required=True)
    p.add_argument('-v', '--verbose', help='Increase verbosity', action='count', default=0)

    p.add_argument('--no-align', action='store_true', help="Don't perform bilingual alignment. Also disables projection.")
    p.add_argument('--no-posproject', action='store_true', help="Disable POS projection.")
    p.add_argument('--no-dsproject', action='store_true', help="Disable DS projection")

    p.add_argument('--ignore-import-errors', action='store_true', default=False, help='Skip instances that cause errors on import. They will not be ingested')
    p.add_argument('--ds-pngs', default=None, help='Directory to store dependency structure PNGs for debugging')
    p.add_argument('--ds-thresh', default=0.0, type=float, help='Threshold')

    args = p.parse_args()

    # -------------------------------------------
    # Set logging verbosity.
    # -------------------------------------------
    if args.verbose == 1:
        ROOT_LOGGER.setLevel(logging.INFO)
    elif args.verbose >= 2:
        ROOT_LOGGER.setLevel(logging.DEBUG)
    # -------------------------------------------

    ROOT_LOGGER.info('Loading Xigt corpus from "{}"'.format(args.input))
    xc = load(args.input, 'r')

    ROOT_LOGGER.info('Parsing Xigt corpus into INTENT2 data structures.')
    corp = parse_xigt_corpus(xc, ignore_import_errors=args.ignore_import_errors)

    ROOT_LOGGER.info('Beginning INTENT2 enrichment...')

    if args.no_align:
        ROOT_LOGGER.info('Alignment disabled.')
    if args.no_posproject:
        ROOT_LOGGER.info('POS projection disabled.')
    if args.no_dsproject:
        ROOT_LOGGER.info("DS Projection disabled")

    align_count = 0
    pos_project_count = 0
    ds_project_count = 0

    for inst in corp:

        try:
            if not args.no_align:
                alignments = heuristic_alignment(inst)
                if alignments:
                    align_count += 1

            # Only try projection if there
            # are alignments.
            if inst.trans.alignments:
                if not args.no_posproject:
                    project_pos(inst)
                    pos_project_count += 1
                if not args.no_dsproject:
                    new_ds = project_ds(inst)
                    ds_project_count += 1

            # Attempt to save dependency structures
            # into the specified directory.
            if args.ds_pngs:
                os.makedirs(args.ds_pngs, exist_ok=True)
                if inst.trans and inst.trans.dependency_structure:
                    trans_ds_filename = '{}_trans_ds.png'.format(inst.id)
                    trans_ds_path = os.path.join(args.ds_pngs, trans_ds_filename)
                    inst.trans.dependency_structure.save_png(trans_ds_path)
                if inst.lang and inst.lang.dependency_structure:
                    lang_ds_filename = '{}_lang_ds.png'.format(inst.id)
                    lang_ds_path = os.path.join(args.ds_pngs, lang_ds_filename)
                    inst.lang.dependency_structure.save_png(lang_ds_path)


        except AlignException as ae:
            ROOT_LOGGER.warning('Alignment failed for instance "{}": {}'.format(inst.id, ae))
        except ProcessException as pe:
            ROOT_LOGGER.warning('Processing failed for instance "{}": {}'.format(inst.id, pe))
        except DependencyException as de:
            ROOT_LOGGER.warning('Error in projecting dependency for instance "{}": {}'.format(inst.id, de))

    if not corp:
        ROOT_LOGGER.error("No instances found in corpus. Not writing output.")
    else:
        print("Processing complete.")
        print("\t{} instances.".format(len(corp)))
        print("\t{} instances aligned.".format(align_count))
        print("\t{} instances POS projected.".format(pos_project_count))
        print("\t{} instances ds projected.".format(ds_project_count))
        print("Preparing to write output.")
        with open(args.output, 'w') as out_f:
            out_f.write(corpus_to_xigt(corp))

