#!/usr/bin/env python3
"""
Go through Xigt-xml files and filter
them to only have the specified requirements.
"""
import sys
from typing import List

from xigt.codecs import xigtxml
from xigt import XigtCorpus, Igt

from intent2.utils.cli_args import existsfile, globfiles, existsdir, get_dir_files
from intent2.serialize.importers import parse_xigt_instance, SegmentationTierException
from argparse import ArgumentParser
import logging
logging.basicConfig()
LOG = logging.getLogger()

def filter_files(pathlist: List[str], args):
    """
    Given a list of Xigt-xml paths, open each
    and attempt to parse it.
    """
    new_corpus = XigtCorpus()

    inst_count = 0
    for path in pathlist:
        with open(path, 'r') as xigt_f:
            xc = xigtxml.load(xigt_f)
            for xigt_inst in xc: # type: Igt
                try:
                    inst = parse_xigt_instance(xigt_inst)

                    keep = True

                    keep &= (not args.require_l or bool(inst.lang))
                    keep &= (not args.require_g or bool(inst.gloss))
                    keep &= (not args.require_t or bool(inst.trans))

                    # Check for l_g_alignment
                    keep &= (not args.l_g_aln or inst.has_lang_gloss_aln())

                    # Check for gloss pos
                    keep &= (not args.g_pos or [gw.tag for gw in inst.gloss if gw.tag])

                    if args.new_ids:
                        xigt_inst.id = 'i{}'.format(inst_count+1)

                    if keep:
                        new_corpus.append(xigt_inst)
                        inst_count += 1
                except SegmentationTierException as ste:
                    LOG.error(ste)
                    continue

                # If a limit is defined, and we've hit it, stop processing.
                if args.limit and inst_count > args.limit:
                    return new_corpus


    return  new_corpus









if __name__ == '__main__':
    p = ArgumentParser()
    p.add_argument('-f', '--file', action='append', help='Provide a particular file for input', type=existsfile, default=[])
    p.add_argument('-p', '--pattern', help='Add a glob pattern.', type=globfiles, default=[])
    p.add_argument('-d', '--dir', action='append', help='Specify a directory containing the files.', type=existsdir, default=[])
    p.add_argument('-r', '--recursive', action='store_true')
    p.add_argument('-v', '--verbose', action='count', help='Increase verbosity', default=0)

    p.add_argument('-o', '--output', help='Output file.', required=True)

    p.add_argument('-l', '--require-l', help='Require instances have a language line', type=bool, default=True)
    p.add_argument('-g', '--require-g', help='Require instances have a gloss line', type=bool, default=True)
    p.add_argument('-t', '--require-t', help='Require instances have a translation line', type=bool, default=True)

    p.add_argument('--l-g-aln', help='Require instances have alignable lang/gloss lines', type=bool, default=True)
    p.add_argument('--g-pos', help='Require a gloss-line pos tier')

    p.add_argument('--limit', help='Limit the number of instances selected', type=int, default=0)

    p.add_argument('--new-ids', action='store_true', help='Assign new IDs to the instances', default=False)

    args = p.parse_args()

    if args.verbose == 1:
        LOG.setLevel(logging.INFO)
    if args.verbose >= 2:
        LOG.setLevel(logging.DEBUG)


    # The files to process can be any combination of globs, a directory, or
    pathlist = args.file + list(get_dir_files(args.dir, ext_filter='.xml', recursive=args.recursive)) + args.pattern
    if not pathlist:
        LOG.critical('No files were found. Please check your args and try again.')
        sys.exit(1)

    new_xc = filter_files(pathlist, args)
    if not new_xc.igts:
        LOG.critical('No instances were found that met the filter criteria.')
        sys.exit(0)
    with open(args.output, 'w') as out_f:
        xigtxml.dump(out_f, new_xc)